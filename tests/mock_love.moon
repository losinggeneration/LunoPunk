-- Busted mock for LÃ¶ve 11.1

busted = require "busted"

loveTbl = {
  createhandlers: ->
  getVersion: ->
  _os: 'Linux'
  _modules: {
    font: nil
    mouse: nil
    image: nil
    system: nil
    audio: nil
    touch: nil
    physics: nil
    joystick: nil
    math: nil
    timer: nil
    graphics: nil
    filesystem: nil
    thread: nil
    data: nil
    event: nil
    window: nil
    keyboard: nil
    video: nil
    sound: nil
  }
  boot: ->
  init: ->
  threaderror: ->
  arg: {
    parseOption: ->
    optionIndices: {
      "true"
    }
    options: {
      fused: {
        a: '0'
      }
      console: {
        a: '0'
      }
      game: {
        arg: {
          "tmp"
        }
        a: '1'
        set: 'true'
      }
    }
    parseOptions: ->
    parseGameArguments: ->
    getLow: ->
  }
  setDeprecationOutput: ->
  _deprecation: nil
  event: {
    clear: ->
    pump: ->
    poll: ->
    push: ->
    wait: ->
    poll_i: ->
    quit: ->
  }
  _version_minor: '1'
  _exe: 'true'
  hasDeprecationOutput: ->
  physics: {
    newMouseJoint: ->
    newPulleyJoint: ->
    newFixture: ->
    setMeter: ->
    getMeter: ->
    newWheelJoint: ->
    newRectangleShape: ->
    newFrictionJoint: ->
    getDistance: ->
    newMotorJoint: ->
    newRopeJoint: ->
    newBody: ->
    newRevoluteJoint: ->
    newEdgeShape: ->
    newWorld: ->
    newPrismaticJoint: ->
    newPolygonShape: ->
    newWeldJoint: ->
    newGearJoint: ->
    newDistanceJoint: ->
    newCircleShape: ->
    newChainShape: ->
  }
  _version_compat: {
    "11.1"
    "11.0"
  }
  math: {
    randomNormal: ->
    isConvex: ->
    setRandomState: ->
    compress: ->
    triangulate: ->
    newTransform: ->
    noise: ->
    getRandomSeed: ->
    newRandomGenerator: ->
    setRandomSeed: ->
    linearToGamma: ->
    gammaToLinear: ->
    getRandomState: ->
    random: ->
    _getRandomGenerator: ->
    decompress: ->
    newBezierCurve: ->
  }
  thread: {
    getChannel: ->
    newThread: ->
    newChannel: ->
  }
  window: {
    restore: ->
    isMaximized: ->
    setFullscreen: ->
    updateMode: ->
    isMinimized: ->
    requestAttention: ->
    getDisplayCount: ->
    minimize: ->
    isVisible: ->
    fromPixels: ->
    getDisplayName: ->
    toPixels: ->
    isOpen: ->
    isDisplaySleepEnabled: ->
    setMode: ->
    hasMouseFocus: ->
    getTitle: ->
    setIcon: ->
    setTitle: ->
    getDesktopDimensions: ->
    getFullscreenModes: ->
    getDPIScale: ->
    getFullscreen: ->
    getPosition: ->
    close: ->
    setDisplaySleepEnabled: ->
    getIcon: ->
    setPosition: ->
    showMessageBox: ->
    getMode: ->
    maximize: ->
    hasFocus: ->
  }
  run: ->
  mouse: {
    setX: ->
    getSystemCursor: ->
    isGrabbed: ->
    isVisible: ->
    newCursor: ->
    setVisible: ->
    getRelativeMode: ->
    setGrabbed: ->
    setCursor: ->
    getPosition: ->
    getCursor: ->
    isCursorSupported: ->
    setY: ->
    setPosition: ->
    getX: ->
    getY: ->
    isDown: ->
    setRelativeMode: ->
  }
  image: {
    newCubeFaces: ->
    isCompressed: ->
    newImageData: ->
    newCompressedData: ->
  }
  isVersionCompatible: ->
  errhand: ->
  font: {
    newImageRasterizer: ->
    newGlyphData: ->
    newTrueTypeRasterizer: ->
    newBMFontRasterizer: ->
    newRasterizer: ->
  }
  _version: '11.1'
  audio: {
    stop: ->
    setVelocity: ->
    getSourceCount: ->
    getActiveEffects: ->
    getActiveSourceCount: ->
    setVolume: ->
    getDopplerScale: ->
    setMixWithSystem: ->
    play: ->
    setOrientation: ->
    isEffectsSupported: ->
    getMaxSourceEffects: ->
    getMaxSceneEffects: ->
    getEffect: ->
    newSource: ->
    pause: ->
    setDistanceModel: ->
    getRecordingDevices: ->
    getVelocity: ->
    newQueueableSource: ->
    getDistanceModel: ->
    getOrientation: ->
    setPosition: ->
    setEffect: ->
    getPosition: ->
    getVolume: ->
    setDopplerScale: ->
  }
  system: {
    hasBackgroundMusic: ->
    setClipboardText: ->
    vibrate: ->
    openURL: ->
    getPowerInfo: ->
    getClipboardText: ->
    getOS: ->
    getProcessorCount: ->
  }
  filesystem: {
    unmount: ->
    write: ->
    setIdentity: ->
    setCRequirePath: ->
    _setAndroidSaveExternal: ->
    getExecutablePath: ->
    getCRequirePath: ->
    init: ->
    newFileData: ->
    isSymlink: ->
    append: ->
    getUserDirectory: ->
    createDirectory: ->
    getInfo: ->
    areSymlinksEnabled: ->
    exists: ->
    newFile: ->
    getSaveDirectory: ->
    mount: ->
    getRequirePath: ->
    getWorkingDirectory: ->
    getSize: ->
    setRequirePath: ->
    isFused: ->
    getDirectoryItems: ->
    setSource: ->
    getLastModified: ->
    isFile: ->
    isDirectory: ->
    getIdentity: ->
    setFused: ->
    getAppdataDirectory: ->
    lines: ->
    load: ->
    remove: ->
    getSource: ->
    getRealDirectory: ->
    read: ->
    setSymlinksEnabled: ->
    getSourceBaseDirectory: ->
  }
  touch: {
    getPressure: ->
    getTouches: ->
    getPosition: ->
  }
  _version_codename: 'Mysterious Mysteries'
  joystick: {
    saveGamepadMappings: ->
    setGamepadMapping: ->
    loadGamepadMappings: ->
    getJoystickCount: ->
    getJoysticks: ->
  }
  _version_revision: '0'
  timer: {
    step: ->
    getDelta: ->
    getTime: ->
    getAverageDelta: ->
    sleep: ->
    getFPS: ->
  }
  graphics: {
    getTextureTypes: ->
    setDefaultMipmapFilter: ->
    getStats: ->
    newParticleSystem: ->
    setFont: ->
    newQuad: ->
    getDefaultFilter: ->
    inverseTransformPoint: ->
    getStackDepth: ->
    setDefaultFilter: ->
    shear: ->
    translate: ->
    print: ->
    newShader: ->
    getPixelWidth: ->
    getBlendMode: ->
    newMesh: ->
    getMeshCullMode: ->
    present: ->
    drawLayer: ->
    newVolumeImage: ->
    scale: ->
    getLineStyle: ->
    setBlendMode: ->
    getImageFormats: ->
    getLineJoin: ->
    draw: ->
    getFont: ->
    setMeshCullMode: ->
    getDepthMode: ->
    newVideo: ->
    getFrontFaceWinding: ->
    getDPIScale: ->
    getCanvasFormats: ->
    discard: ->
    setStencilTest: ->
    _shaderCodeToGLSL: ->
    newImageFont: ->
    origin: ->
    push: ->
    newArrayImage: ->
    clear: ->
    getHeight: ->
    setFrontFaceWinding: ->
    reset: ->
    newSpriteBatch: ->
    newImage: ->
    rectangle: ->
    isCreated: ->
    stencil: ->
    getShader: ->
    setNewFont: ->
    pop: ->
    flushBatch: ->
    getScissor: ->
    polygon: ->
    arc: ->
    ellipse: ->
    circle: ->
    _newVideo: ->
    newCubeImage: ->
    setColor: ->
    line: ->
    points: ->
    setBackgroundColor: ->
    setColorMask: ->
    setLineStyle: ->
    getStencilTest: ->
    _transformGLSLErrorMessages: ->
    getRendererInfo: ->
    isActive: ->
    rotate: ->
    intersectScissor: ->
    setScissor: ->
    printf: ->
    getPixelHeight: ->
    getDimensions: ->
    replaceTransform: ->
    captureScreenshot: ->
    getWidth: ->
    isGammaCorrect: ->
    setPointSize: ->
    getPixelDimensions: ->
    drawInstanced: ->
    getColorMask: ->
    transformPoint: ->
    setLineWidth: ->
    newCanvas: ->
    setDepthMode: ->
    getColor: ->
    validateShader: ->
    getDefaultMipmapFilter: ->
    getSystemLimits: ->
    applyTransform: ->
    setShader: ->
    setLineJoin: ->
    newFont: ->
    setCanvas: ->
    getLineWidth: ->
    newText: ->
    getPointSize: ->
    getBackgroundColor: ->
    setWireframe: ->
    isWireframe: ->
    _setDefaultShaderCode: ->
    getCanvas: ->
    getSupported: ->
  }
  path: {
    getFull: ->
    endslash: ->
    abs: ->
    normalslashes: ->
    leaf: ->
  }
  _setGammaCorrect: ->
  data: {
    newByteData: ->
    encode: ->
    hash: ->
    compress: ->
    getPackedSize: ->
    decode: ->
    unpack: ->
    newDataView: ->
    decompress: ->
    pack: ->
  }
  handlers: {
    gamepadreleased: ->
    focus: ->
    touchpressed: ->
    lowmemory: ->
    quit: ->
    textinput: ->
    wheelmoved: ->
    resize: ->
    directorydropped: ->
    touchreleased: ->
    joystickhat: ->
    joystickaxis: ->
    joystickpressed: ->
    threaderror: ->
    gamepadpressed: ->
    visible: ->
    joystickreleased: ->
    joystickremoved: ->
    gamepadaxis: ->
    textedited: ->
    mousefocus: ->
    filedropped: ->
    mousepressed: ->
    keyreleased: ->
    touchmoved: ->
    mousemoved: ->
    joystickadded: ->
    mousereleased: ->
    keypressed: ->
  }
  sound: {
    newSoundData: ->
    newDecoder: ->
  }
  keyboard: {
    setTextInput: ->
    hasTextInput: ->
    getScancodeFromKey: ->
    hasScreenKeyboard: ->
    setKeyRepeat: ->
    getKeyFromScancode: ->
    isDown: ->
    hasKeyRepeat: ->
    isScancodeDown: ->
  }
  video: {
    newVideoStream: ->
  }
  _version_major: '11'
}
export love = busted.mock loveTbl
love
